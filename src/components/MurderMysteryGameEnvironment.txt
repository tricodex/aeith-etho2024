'use client';
// src/components/MurderMysteryGameEnvironment.tsx
import React, { useState, useEffect } from 'react';
import Image from 'next/image';
import { motion, AnimatePresence } from 'framer-motion';
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
// import { Tooltip } from "@/components/ui/tooltip";
import { useToast } from "@/hooks/use-toast";
import MurderMysteryGame from './xxxMurderMysteryGame';

const roomBackgrounds = {
  "Foyer": "/rooms/foyer.svg",
  "Living Room": "/rooms/living-room.svg",
  "Dining Room": "/rooms/dining-room.svg",
  "Kitchen": "/rooms/kitchen.svg",
  "Library": "/rooms/library.svg",
  "Study": "/rooms/study.svg",
  "Master Bedroom": "/rooms/master-bedroom.svg",
  "Guest Bedroom": "/rooms/guest-bedroom.svg",
  "Bathroom": "/rooms/bathroom.svg",
  "Attic": "/rooms/attic.svg",
};

const MurderMysteryGameEnvironment: React.FC = () => {
  const [currentRoom, setCurrentRoom] = useState("Foyer");
  const [isNightMode, setIsNightMode] = useState(false);
  const { toast } = useToast();

  useEffect(() => {
    const nightModeInterval = setInterval(() => {
      setIsNightMode((prev) => !prev);
    }, 60000); // Toggle night mode every minute

    return () => clearInterval(nightModeInterval);
  }, []);

  const handleRoomChange = (newRoom: string) => {
    setCurrentRoom(newRoom);
    toast({
      title: "Room Changed",
      description: `You have entered the ${newRoom}`,
    });
  };

  return (
    <div className={`min-h-screen p-4 ${isNightMode ? 'bg-gray-900 text-white' : 'bg-gray-100'}`}>
      <Card className="w-full max-w-6xl mx-auto overflow-hidden">
        <CardHeader className="bg-purple-700 text-white">
          <CardTitle className="text-3xl font-bold text-center">Murder Mystery in the Haunted Mansion</CardTitle>
        </CardHeader>
        <CardContent className="p-0">
          <div className="grid grid-cols-3 gap-4 p-4">
            <div className="col-span-2">
              <AnimatePresence mode="wait">
                <motion.div
                  key={currentRoom}
                  initial={{ opacity: 0 }}
                  animate={{ opacity: 1 }}
                  exit={{ opacity: 0 }}
                  transition={{ duration: 0.5 }}
                  className="relative h-[400px] rounded-lg overflow-hidden"
                >
                  <Image
                    src={roomBackgrounds[currentRoom as keyof typeof roomBackgrounds]}
                    alt={currentRoom}
                    layout="fill"
                    objectFit="cover"
                  />
                  <div className="absolute inset-0 bg-black bg-opacity-30" />
                  <h2 className="absolute top-4 left-4 text-2xl font-bold text-white">{currentRoom}</h2>
                </motion.div>
              </AnimatePresence>
              <div className="mt-4">
                <MurderMysteryGame onRoomChange={handleRoomChange} />
              </div>
            </div>
            <div>
              <Card className="h-full">
                <CardHeader>
                  <CardTitle>Game Information</CardTitle>
                </CardHeader>
                <CardContent>
                  <ScrollArea className="h-[300px] mb-4">
                    {/* Game log will be rendered here */}
                  </ScrollArea>
                  <div className="space-y-2">
                    <Input placeholder="Enter your action..." />
                    <Button className="w-full">Submit Action</Button>
                  </div>
                </CardContent>
              </Card>
            </div>
          </div>
        </CardContent>
      </Card>
      {/* <Tooltip content="Toggle Night Mode">
        <Button
          className="fixed bottom-4 right-4"
          variant="outline"
          onClick={() => setIsNightMode((prev) => !prev)}
        >
          {isNightMode ? 'üåô' : '‚òÄÔ∏è'}
        </Button>
      </Tooltip> */}
    </div>
  );
};

export default MurderMysteryGameEnvironment;